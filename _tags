# OASIS_START
# DO NOT EDIT (digest: 1f5b1920aa5191df724ab0786999e476)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library containers
"containers.cmxs": use_containers
"cache.cmx": for-pack(Containers)
"deque.cmx": for-pack(Containers)
"gen.cmx": for-pack(Containers)
"fHashtbl.cmx": for-pack(Containers)
"fQueue.cmx": for-pack(Containers)
"flatHashtbl.cmx": for-pack(Containers)
"hashset.cmx": for-pack(Containers)
"heap.cmx": for-pack(Containers)
"lazyGraph.cmx": for-pack(Containers)
"persistentGraph.cmx": for-pack(Containers)
"persistentHashtbl.cmx": for-pack(Containers)
"pHashtbl.cmx": for-pack(Containers)
"sequence.cmx": for-pack(Containers)
"skipList.cmx": for-pack(Containers)
"splayTree.cmx": for-pack(Containers)
"splayMap.cmx": for-pack(Containers)
"univ.cmx": for-pack(Containers)
"vector.cmx": for-pack(Containers)
"bij.cmx": for-pack(Containers)
"piCalculus.cmx": for-pack(Containers)
"bencode.cmx": for-pack(Containers)
"sexp.cmx": for-pack(Containers)
"RAL.cmx": for-pack(Containers)
"multiSet.cmx": for-pack(Containers)
"unionFind.cmx": for-pack(Containers)
"smallSet.cmx": for-pack(Containers)
"leftistheap.cmx": for-pack(Containers)
"absSet.cmx": for-pack(Containers)
"CSM.cmx": for-pack(Containers)
"multiMap.cmx": for-pack(Containers)
"actionMan.cmx": for-pack(Containers)
"BV.cmx": for-pack(Containers)
"qCheck.cmx": for-pack(Containers)
"bencodeOnDisk.cmx": for-pack(Containers)
"show.cmx": for-pack(Containers)
"tTree.cmx": for-pack(Containers)
"hGraph.cmx": for-pack(Containers)
"automaton.cmx": for-pack(Containers)
# Library containers_thread
"containers_thread.cmxs": use_containers_thread
<*.ml{,i}>: package(threads)
# Library containers_lwt
"containers_lwt.cmxs": use_containers_lwt
<*.ml{,i}>: use_containers
<*.ml{,i}>: package(lwt)
<*.ml{,i}>: package(unix)
# Library containers_cgi
"cgi/containers_cgi.cmxs": use_containers_cgi
<cgi/*.ml{,i}>: use_containers
<cgi/*.ml{,i}>: package(CamlGI)
<cgi/*.ml{,i}>: package(unix)
# Executable benchs
"tests/benchs.native": use_containers
"tests/benchs.native": package(bench)
"tests/benchs.native": package(unix)
<tests/*.ml{,i}>: package(bench)
# Executable run_tests
"tests/run_tests.native": use_containers
"tests/run_tests.native": package(threads)
"tests/run_tests.native": package(oUnit)
"tests/run_tests.native": package(lwt)
"tests/run_tests.native": package(lwt.unix)
"tests/run_tests.native": package(unix)
<tests/*.ml{,i}>: use_containers
<tests/*.ml{,i}>: package(threads)
<tests/*.ml{,i}>: package(oUnit)
<tests/*.ml{,i}>: package(lwt)
<tests/*.ml{,i}>: package(lwt.unix)
<tests/*.ml{,i}>: package(unix)
# Executable web_pwd
"examples/cgi/web_pwd.byte": use_containers_cgi
"examples/cgi/web_pwd.byte": use_containers
"examples/cgi/web_pwd.byte": package(threads)
"examples/cgi/web_pwd.byte": package(CamlGI)
"examples/cgi/web_pwd.byte": package(unix)
<examples/cgi/*.ml{,i}>: use_containers_cgi
<examples/cgi/*.ml{,i}>: use_containers
<examples/cgi/*.ml{,i}>: package(threads)
<examples/cgi/*.ml{,i}>: package(CamlGI)
<examples/cgi/*.ml{,i}>: package(unix)
# OASIS_STOP
